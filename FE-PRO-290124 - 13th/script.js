
//     Домашня робота 13

// Домашня робота:
// Знайдіть всі великі літери в тексті і збереження їх в масив

let textStr = " Lorem ipsum dolor sit amet consectetur adipisicing elit. Eos itaque vero laborum fugit harum! Quia, cumque necessitatibus nemo veniam odit dolor impedit aspernatur, ipsa vitae minima quasi doloribus repellendus cupiditate!";

let redExp = /[A-Z]/g; //'g', щоб знайти всі великі літери у всьому тексті

let newArr = textStr.match(redExp); // метод match() для знаходження всіх великих літер
console.log(newArr);

// Знаходження слів із певною кількістю символів:
// Напишіть регулярний вираз для знаходження слів у тексті, що складаються рівно з 5 букв, можна взяти текст з textStr з першого завдання

let redExp1 = /\b\w{5}\b/g;

let newArr1 = textStr.match(redExp1);
console.log(newArr1);

// Створити регулярний вираз, який видаляє всі HTML теги з рядка. Наприклад, після обробки рядка <p>Це - простий <b>текст</b>.</p> має залишитися Це - простий текст.
let tegStr = '<p>Це - простий <b>текст</b>.</p>';
let regExp2 = /<[^>]*>/g;

let newText = tegStr.replace(regExp2, '');
console.log(newText);


// Розробити регулярний вираз для перевірки сили пароля. Пароль повинен містити принаймні одну велику літеру, одну маленьку літеру, 
// одну цифру, один спеціальний символ (!@#$%^&*) і мати довжину від 8 до 20 символів.

let passChek = /^(?=.*[A-Z])(?=.*[a-z])[\w!@#$%^&*]{8,20}$/;

// (?=.*[A-Z])- перевіряє наявність однієї великої літери
// [\w!@#$%^&*] дозволяє використовувати букви, цифри і певні спеціальні символи
// ^ - початку рядка,  $ - кінець рядка

// Створіть групу радіокнопок для оцінки від 1 до 5.
// Додайте обробник події onchange для виявлення вибору користувача, а потім виведіть відповідне повідомлення (наприклад, "Дякуємо за вашу оцінку!").

window.onload = function(){
  let userChoice = document.querySelectorAll('input[type="radio"]');

  userChoice.forEach(radio =>{
    radio.addEventListener('change', function(){
      userChoice.forEach( rd =>{
        if (rd !== this) {
          rd.checked = false;
        }
      })
      alert('Thank you for choice!');
    }) 
    
  })
  
};

//     Домашня робота 14

// Домашня робота
// - прочитайте про cookie статю
// - зробіть форму  реєстрації з такими елементами
// поле ввода імені
// поле ввода емейла
// поле ввода телефону
// поле вводу пароля
// повторне поле пароля яке перевіяє чи співпадають паролі
// так кнопкою відправити, кнопка повина бути disabled поки користувач не введе всі валідні значення ( до кожного поля напишіть регулярку для первірки данних ) 
// Якщо всі поля заповнено вірно то в кнопки зникає disabled і форму можна відправити
// Додаткове завдання:
// Після натискання на кнопку відправити, показати анімацію завантаження 5 сеукунд і вивести повідомлення дані успішно відправлені
// Фому рекомендую взяти з бутсрапа щоб не витрачати час на html css
// https://getbootstrap.com/docs/5.0/examples/checkout/

//     Домашня робота 15

// Домашня робота:
// - встановіть node.js весрію LTS 
// https://nodejs.org/en/download
// - Створіть просту форму з input color налаштуваннями  фону сторінки, і збережіть вибір користувача у 
// localStorage при кліку на кнопку save. При наступному відкритті сторінки, або оновлені, застосуйте дос сторінки колір з localStorage.
// - Зробити сторінку з кнопкою, при натиску на кнопку робиться запит (fetch) до 
// http swapi.dev/api/planets/1/ та виводиться картка (html розмітка довільна) з даними з запиту, дані з масиву 
// які мають лінк треба вивести в тег А і додати лінк в атрибут href

// Додаткове завдання:
// Реалізуйте простий список завдань (to-do list), де можна додавати і видаляти пункти. Зберігайте список у localStorage, 
// щоб після перезавантаження сторінки завдання залишалися доступні.

//     Домашня робота 16

// Створіть реакт проект за допомогою Vite  а також реалізуйте сторінку (вона у вас є тільки треба розібрати на компоненти) 
// https://www.figma.com/file/g9rxsaDDSGYVyhYzRcU57G/Netflix_Homepage-(Community)?type=design&node-id=0-1&mode=design&t=BAR0Os0WXfeGASaF-0

//     Домашня робота 11

// Додаткова робота:
// -Реалізуйте в todo  списку створеному на уроці кнопку видалення
// - реалізуйте сортування за імям ( створіть поле вводу ) і при вводі тексту залишайте тільки ті айтеми туду 
// що мають такеж значення щой в полі пошуку.

// Видалення усіх вказаних елементів з масиву
// Завдання: Напишіть функцію, яка приймає масив та елемент, який потрібно видалити з масиву. 
// Функція повинна повертати новий масив без елементів, що були вказані для видалення.

// Напишіть функцію, яка приймає два масиви і повертає новий масив, що містить унікальні 
// елементи з обох масивів (тобто без дублікатів).

// Напишіть функцію, яка приймає масив чисел і повертає об'єкт з двома масивами: перший 
// масив містить парні числа, а другий — непарні.





// Домашня робота 10 (борг)


// v2
// Комбіноване завдання 'keydown' і 'keyup' для створення інтерактивного меню: Коли користувач натискає певну клавішу М, 
// з'являється  меню ul елемент в якому 3 li, і зробити можливість  переміщатися по пунктах меню, використовуючи клавіші 
// вгору/вниз змінюючи бекграунд. При натиску клавіші С меню зникає.

// Додаткова робота:
// event.target   
// Створіть блок з классом blockContainer з 3 кнопками,  в кожної з яких унікальний клас button.first, button.second, button.third.
// Додайте обробник кліка на blockContainer і при кліку на кнопку виводьте alert в якому повідомляйте яка кнопка отримала клік

// 'onMouseDown' і 'onMouseUp': Реалізуйте просту гру "Перетягування": створіть об'єкт, який можна перетягувати в межах певної 
// області, використовуючи події натискання та відпускання кнопки миші.





//            д/з 8                                   Я не зрозуміла це завдання: 
//  const menuData = [
//     { name: 'Головна', url: '/' },
//     { name: 'Про нас', url: '/about' },
//     { name: 'Послуги', url: '/services' },
//     // Додайте ще пункти меню за потреби
// ];
// 3)Створіть в хедері з попереднього завдання А теги з значенням з обєкта name  встановленим значенням в href з url.


// дз 8 додаткові:

// 4)Створіть блок за допомогою js задайте блоку стиль display flex та в середині цього блоку створіть 50 div блоків з правилом border-radius, width 50px height 50px та background-color



// Створіть блок контейнер в html та перебераючи масив за допомогою js створіть елемент Р в залежності від usePrepend розмість його перед контейнером або за контейнером 
// const elementsArray = [
//     { text: 'Елемент 1', usePrepend: true },
//     { text: 'Елемент 2', usePrepend: false },
//     { text: 'Елемент 3', usePrepend: true }
// ]

// спробуйте зробити  завдання 4 так щоб в кожного div елемента був унікальний бекграунд



//   це мої борги:

// Додаткова робота:
// Визначення Частоти Слова у Рядку
// Створіть функцію, яка приймає рядок та слово, і повертає кількість разів, скільки це слово зустрічається у рядку.

// Заміна Першої Букви Кожного Слова на Велику
// Розробіть функцію, яка перетворює першу букву кожного слова у рядку на велику, залишаючи решту букв маленькими.


// 4 Задачі для практики forEach, reverse  Виведіть значення з масиву в зворотньому порядку
// const numbers = [1, 2, 3, 4, 5];

// 5  Задачі для практики map та Math.round
//  Маєте масив чисел з плаваючою комою. Використовуйте map разом з Math.round, щоб створити новий масив, в якому кожне число буде округлене до найближчого цілого.

// Додаткове завдання:
// 1. Вгадай число
// Гравець має вгадати число, яке програма випадково генерує в заданому діапазоні від 1до 20. Після кожної спроби програма повідомляє, чи є загадане число більшим чи меншим від введеного. Гра триває до вгадування числа 

// 2. Камінь-ножиці-папір
// Гравець вводить свій вибір, а програма генерує власний випадковим чином. Потім визначається переможець за традиційними правилами гри.
// Додаткові матеріали 



// Напишіть функцію, яка використовує forEach для обчислення суми всіх елементів у масиві чисел. Масив наприклад const numberArr = [10,20,30]

// Додаткове завдання:
// Напишіть функцію, яка використовує forEach для створення масиву, що містить лише унікальні елементи вихідного масиву.


// Напишіть функцію, що приймає масив чисел і колбек-функцію. Функція повинна використовувати for...of для обходу по масиву та
// викликати колбек-функцію для кожного елемента. Колбек-функція повинна повертати true або false, вказуючи, чи слід включити поточний елемент до нового масиву.


// Передавши масив  [1, 2, 3, 4, 5] і колбек-функція, що відбирає парні числа.